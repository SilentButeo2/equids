#!/bin/bash

#######################################################################################################################
# Color configuration
#######################################################################################################################

# Example usage:
# echo -e ${RedF}This text will be red!${Reset}
# echo -e ${BlueF}${BoldOn}This will be blue and bold!${BoldOff} - and this is just blue!${Reset}
# echo -e ${RedB}${BlackF}This has a red background and black font!${Reset}and everything after the reset is normal text!
colors() {
	Escape="\033";
	BlackF="${Escape}[30m"; RedF="${Escape}[31m";   GreenF="${Escape}[32m";
	YellowF="${Escape}[33m";  BlueF="${Escape}[34m";    PurpleF="${Escape}[35m";
	CyanF="${Escape}[36m";    WhiteF="${Escape}[37m";
	BlackB="${Escape}[40m";     RedB="${Escape}[41m";     GreenB="${Escape}[42m";
	YellowB="${Escape}[43m";    BlueB="${Escape}[44m";    PurpleB="${Escape}[45m";
	CyanB="${Escape}[46m";      WhiteB="${Escape}[47m";
	BoldOn="${Escape}[1m";      BoldOff="${Escape}[22m";
	ItalicsOn="${Escape}[3m";   ItalicsOff="${Escape}[23m";
	UnderlineOn="${Escape}[4m";     UnderlineOff="${Escape}[24m";
	BlinkOn="${Escape}[5m";   BlinkOff="${Escape}[25m";
	InvertOn="${Escape}[7m";  InvertOff="${Escape}[27m";
	Reset="${Escape}[0m";
}

colors

msg_error() {
	echo -e ${RedF}"[#] $(date +"%x %R") - Error: $1"${Reset}
}

msg_warning() {
	echo -e ${YellowF}"[#] $(date +"%x %R") - Warning: $1"${Reset}
}

msg_info() {
	echo -e ${GreenF}"[#] $(date +"%x %R") - Info: $1"${Reset}
}

msg_debug() {
	echo -e ${BlueF}"[#] $(date +"%x %R") - Debug: $1"${Reset}
}

#######################################################################################################################
# Standard configuration
#######################################################################################################################

COMPILE_STD=/tmp/compile_std.log
COMPILE_ERR=/tmp/compile_err.log

FILE_ROBOTIP=/tmp/robot_ip

#######################################################################################################################
# Argument checking
#######################################################################################################################

if [[ "$#" != "0" ]]; then
	msg_error "This program require no arguments"
	exit 0
fi

IP_ADDRESS=

#######################################################################################################################
# Function definitions
#######################################################################################################################

find_robot() {
	IFACE=eth0
	IP_ADDRESS=$(sudo arp-scan -l -I $IFACE | grep "3COM" | cut -f1)
	if [[ "$IP_ADDRESS" = "" ]]; then
		IFACE=wlan0
		IP_ADDRESS=$(sudo arp-scan -l -I $IFACE | grep "3COM" | cut -f1)
	fi
}

ping_robot() {
	touch $FILE_ROBOTIP
	source $FILE_ROBOTIP
	if [ "$ROBOT" != "" ]; then
		PING=$(ping -a -W 2 -c 1 $ROBOT)
		CONNECTION=$(echo $PING | grep "1 received")
		if [ "$CONNECTION" != "" ]; then
			IP_ADDRESS=$(ping -q -t 1 -c 1 $ROBOT | grep PING | sed -e "s/).*//" | sed -e "s/.*(//")
		fi
	fi
}

configure_host() {
	msg_debug "ip route get $IP_ADDRESS"
	IFACE=$(ip route get $IP_ADDRESS | grep -oP '(?<=dev )[a-zA-Z0-9]*')
	HOST=$(ifconfig $IFACE| grep -oP '(?<=inet addr:)[0-9.]*')
	msg_info "We will connect over interface $IFACE with host IP $HOST"
}



#######################################################################################################################
# Function execution
#######################################################################################################################

ping_robot

if [[ "$IP_ADDRESS" == "" ]]; then
	find_robot
fi

if [[ "$IP_ADDRESS" == "" ]]; then
	exit 66
fi

echo "ROBOT=$IP_ADDRESS" > $FILE_ROBOTIP
echo $IP_ADDRESS
